@page "/checkout"
@attribute [Authorize]
@inject OrdersClient OrdersClient
@inject OrderState OrderState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
    <div class="main">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>
        </div>
        @if (isSubmitting)
        {
            <button type="submit" class="checkout-button btn btn-warning" disabled>
                Sending...
            </button>
        }
        else
        {
            <button type="submit" class="checkout-button btn btn-warning">
                Place order
            </button>
        }
        <DataAnnotationsValidator />
    </div>
</EditForm>

@code {

    public bool isSubmitting { get; set; } = false;

    protected override void OnInitialized()
    {
        // In the background, ask if they want to be notified about order updates
        _ = RequestNotificationSubscriptionAsync();
    }

    async Task PlaceOrder()
    {
        try
        {
            isSubmitting = true;
            var newOrderId = await OrdersClient.PlaceOrder(OrderState.Order);
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
            isSubmitting = false;
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription != null)
        {
            try
            {
                await OrdersClient.SubscribeToNotifications(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }
}