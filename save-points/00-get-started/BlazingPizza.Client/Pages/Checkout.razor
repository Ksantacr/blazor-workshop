@page "/checkout"
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject NavigationManager NavigationManager

<EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
    <div class="main">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>
        </div>
        @if (isSubmitting)
        {
            <button type="submit" class="checkout-button btn btn-warning" disabled>
                Sending...
            </button>
        }
        else
        {
            <button type="submit" class="checkout-button btn btn-warning">
                Place order
            </button>
        }
        <DataAnnotationsValidator />
    </div>
</EditForm>

@code {

    public bool isSubmitting { get; set; } = false;
    async Task PlaceOrder()
    {
        isSubmitting = true;
        var response = await HttpClient.PostAsJsonAsync("orders", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
        isSubmitting = false;
    }
}